<?php
//get current theme
DEFINE('THEME',variable_get('theme_default','none'));
/*
 * hook_permission
 */

 function autodownload_permission(){
     return array(
         'administer auto-downloads' => array(
             'title' => t('Administer auto-downloads'),
             'description' => t('Allows users to administer auto-downloads on the site'),
         ),
     );
 }

 /*
 * hook_menu
 */
 
 function autodownload_menu(){  
     $items['admin/config/user-interface/autodownload'] = array(
       'title' => 'Configure Automatic Downloads', 
       'description' => 'Add automatic links to files from node pages',
       'page callback' => 'autodownload_list_current_pages',
       //'page arguments' => array('autodownload_list_current_pages'),
       'access arguments' => array('TRUE'),
       'file' => 'autodownload.admin.inc',
     );
     $items['admin/config/user-interface/autodownload/list'] = array(
       'title' => 'Current Auto-downloads',
       'weight' => -1,
       'access arguments' => array('TRUE'),
       'type' => MENU_DEFAULT_LOCAL_TASK,
     );
     $items['admin/config/user-interface/autodownload/create'] = array(
       'title' => 'Create+',
       'description' => 'Creates a new node auto-download assignment',
       'page callback' => 'drupal_get_form',
       'page arguments' => array('autodownload_create_new_download_form'),
       'access arguments' => array('TRUE'),
       'file' => 'autodownload.admin.inc',
       'type' => MENU_LOCAL_TASK,        
     );
     $items['admin/config/user-interface/autodownload/advanced'] = array(
        'title' => 'Advanced',
        'description' => 'Configure advanced options for Automatic Downloads',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('autodownload_configure_advanced_form'),
        'weight' => 1,
        'access arguments' => array('TRUE'),
        'file' => 'autodownload.admin.inc',
        'type' => MENU_LOCAL_TASK, 
      );
     $items['admin/config/user-interface/autodownload/edit/%'] = array(
       'title' => 'Edit Auto-Download',
       'description' => 'Edits an existing auto-download assignment',
       'page callback' => 'drupal_get_form',
       'page arguments' => array('autodownload_edit_node_form',5),
       'access arguments' => array('TRUE'),
       'file' => 'autodownload.admin.inc',
       'type' => MENU_VISIBLE_IN_BREADCRUMB,
     );
     $items['admin/config/user-interface/autodownload/delete/%'] = array(
        'title' => 'Delete Auto-Download',
        'description' => 'Deletes an existing auto-download assignment',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('autodownload_delete_node_form',5),
        'access arguments' => array('TRUE'),
        'file' => 'autodownload.admin.inc',
        'type' => MENU_VISIBLE_IN_BREADCRUMB,
      );
     return $items;
 }
   function autodownload_download_file($node,$url,$method){
    //grab the current path in Drupal
    $alias = request_path();
    if($alias == $node && $method == 'simple'){
                 if(variable_get('autodl_timeout') == 1){
                     $delay = variable_get('autodl_timeout_seconds');
                     //if timeout variable is set, then set delay on ready function
                     $meta_tag = array(
                         '#tag' => 'meta',
                         '#attributes' => array(
                             'http-equiv' => "refresh",
                             'content' => "$delay;$url",
                         ),
                     );
                     drupal_add_html_head($meta_tag,'autodl');
                 }
                 else{
                     //timeouts are not enabled, just download the file
                     $delay = 0;
                     $meta_tag = array(
                         '#tag' => 'meta',
                         '#attributes' => array(
                             'http-equiv' => "refresh",
                             'content' => "$delay;$url",
                         ),
                     );
                     drupal_add_html_head($meta_tag,'autodl');
                 }
    }//endif
    elseif($alias == $node && $method == 'iframe'){
        //case for iframe 'download' link with timeout
        if(variable_get('autodl_timeout') == 1){
            $delay = variable_get('autodl_timeout_seconds') * 1000;
            drupal_add_js(
                "jQuery(document).ready(function(){
                    setTimeout(function(){
                        var link = \"$url\";
                        var frame = document.createElement(\"iframe\");
                        frame.setAttribute(\"width\",1);
                        frame.setAttribute(\"height\",1);
                        frame.setAttribute(\"frameborder\",0);
                        frame.setAttribute(\"src\",link);
                        document.body.appendChild(frame);
                    },$delay) 
                });"
                ,"inline");
                    
        }
        else{
            //case for iframe 'download' link without timeout
            $delay = 0;
            drupal_add_js(
                "jQuery(document).ready(function(){
                    setTimeout(function(){
                        var link = \"$url\";
                        var frame = document.createElement(\"iframe\");
                        frame.setAttribute(\"width\",1);
                        frame.setAttribute(\"height\",1);
                        frame.setAttribute(\"frameborder\",0);
                        frame.setAttribute(\"src\",link);
                        document.body.appendChild(frame);
                    },$delay) 
                });"
                ,"inline");
        }
    }
    elseif($alias == $node && $method == 'html5'){
        //case for html5 'download' link with timeout
        if(variable_get('autodl_timeout') == 1){
        $delay = variable_get('autodl_timeout_seconds') * 1000;
        drupal_add_js("
                jQuery(document).ready(function(){
                setTimeout(function(){
                link = document.createElement('a');
                link.setAttribute('id',\"auto-dl\");
                link.setAttribute('href',\"$url\");
                link.setAttribute('download',\"$url\");
                document.body.appendChild(link);
                document.getElementById('auto-dl').click();
                },$delay)
                });
                ", 'inline'
                );
        }
        else{
        //case for html5 'download' link without timeout
        $delay = 0;
        drupal_add_js("
                jQuery(document).ready(function(){
                setTimeout(function(){
                link = document.createElement('a');
                link.setAttribute('id',\"auto-dl\");
                link.setAttribute('href',\"$url\");
                link.setAttribute('download',\"$url\");
                document.body.appendChild(link);
                document.getElementById('auto-dl').click();
                },$delay)
                });
                ", 'inline'
                );    
        }
    }//end if html5
    elseif(module_exists('overlay') && path_is_admin($_GET['q'])){
        //this is a special case where the admin is looking at the page
        //which has an auto-download, but we don't want to trigger it if
        //they're looking at an overlay
        //do nothing
        return;
    }
    else{
        //do nothing, the node doesn't have an autodownload;
        return;
    }//endelse
}//end asterisk_auto_dl
  
  function autodownload_preprocess_page(&$vars,$method){
      $method = variable_get('autodl_method');
      if(module_exists('autodownload')){
      //if auto-downloads exist and are turned on, then run some pre-process functions on them
      $path = request_path();
      $result = db_query("SELECT * FROM {autodownloads} WHERE nid = :path AND enabled = 1", array(':path' => $path));
      foreach($result as $row){
          autodownload_download_file($row->nid, $row->url,$method);
      }
  }
  }
?>